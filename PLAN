+ Have a backend module to send requests and collect responses from a KDC
+ Have a frontend module for UDP that relays via the backend module
+ Have a frontend module for TCP that relays like UDP does
+ Recognise TCP flags PROBE and STARTTLS and handle traffic like TCP
+ Delegate STARTTLS requests to the starttls module and the TLS Pool
+ Implement a KXOVER module with a client and server side
- Construct a dedicated KXOVER server for daemon mode use
- Construct a dedicated KXOVER client for daemon mode use
- Construct a dedicated KXOVER client for command line use
- Construct a dedicated KXOVER operations tool to list/get/set in KDB
+ Specialise KX-OFFER messages sent under STARTTLS as a KXOVER server
+ KX-OFFER += salt (both sides), += extensions, -= accept-*
+ KX' ASN.1 += format for "context info"; label is ranked "spec req"
- Specialise KDC-sent "not found" forwarding as a KXOVER client
- Specialise KDC-sent krbtgt/A@B redirect as refresh hints
- We are not using void *watcher->data from libev, thus wasting space
- Make the TLS Pool asynchronous, and follow that in starttls.c
- Docker demo: reveal static keys, actual DANE, KDC [::1]:77,:99
+ Allow a test mode without TLS, through a faketls.c file
